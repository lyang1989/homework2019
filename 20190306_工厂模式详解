1、用UML绘制出三种工厂模式的类结构图。
https://github.com/lyang1989/pattern-demo/tree/master/src/main/java/com/princeli/pattern/factory/simple/简单工厂模式uml图.png
https://github.com/lyang1989/pattern-demo/blob/master/src/main/java/com/princeli/pattern/factory/method/工厂方法模式uml图.png
https://github.com/lyang1989/pattern-demo/blob/master/src/main/java/com/princeli/pattern/factory/abstractfactory/抽象工厂模式uml图.png
2、深刻理解产品族和产品等级结构之间的关系。
    (1) 产品等级结构：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。
    (2) 产品族：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中，海尔电视机、海尔电冰箱构成了一个产品族。

3、自主完成三种工厂模式的代码实现，理解简单工厂、工厂方法和抽象工厂的区别。
简单工厂实现： https://github.com/lyang1989/pattern-demo/tree/master/src/main/java/com/princeli/pattern/factory/simple
优点：
　　（1）很明显，简单工厂的特点就是“简单粗暴”，通过一个含参的工厂方法，我们可以实例化任何产品类，上至飞机火箭，下至土豆面条，无所不能。所以简单工厂有一个别名：上帝类。
缺点：
　　（1）任何”东西“的子类都可以被生产，负担太重。当所要生产产品种类非常多时，工厂方法的代码量可能会很庞大。
　　（2）在遵循开闭原则（对拓展开放，对修改关闭）的条件下，简单工厂对于增加新的产品，无能为力。因为增加新产品只能通过修改工厂方法来实现。

工厂方法实现：https://github.com/lyang1989/pattern-demo/blob/master/src/main/java/com/princeli/pattern/factory/method
优点：
　　（1）工厂方法模式就很好的减轻了工厂类的负担，把某一类/某一种东西交由一个工厂生产；（对应简单工厂的缺点1）
　　（2）同时增加某一类”东西“并不需要修改工厂类，只需要添加生产这类”东西“的工厂即可，使得工厂类符合开放-封闭原则。
　　缺点：
　　（1）相比简单工厂，实现略复杂。
　　（2）对于某些可以形成产品族的情况处理比较复杂。
　　对于缺点（2），我们可以借用抽象工厂来实现。
抽象工厂实现：https://github.com/lyang1989/pattern-demo/blob/master/src/main/java/com/princeli/pattern/factory/abstractfactory
　优点：针对产品族；
　缺点：针对产品族。
　所以，只有对应产品族的情况下，才需要使用抽象工厂模式。
 区别
　　简单工厂 ： 用来生产同一等级结构中的任意产品。（不支持拓展增加产品）
　　工厂方法 ：用来生产同一等级结构中的固定产品。（支持拓展增加产品）   
　　抽象工厂 ：用来生产不同产品族的全部产品。（不支持拓展增加产品；支持增加产品族）  
